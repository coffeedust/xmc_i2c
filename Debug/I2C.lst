
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003850  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000044  1ffe8800  0c003850  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000158  1ffe8844  0c003894  00010844  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000c68  00000000  00000000  00010848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010189  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025fd  00000000  00000000  00021639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005544  00000000  00000000  00023c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000347c  00000000  00000000  0002917c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007180  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ba2  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  0003a31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000046c  00000000  00000000  0003ae2a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	55 23 00 08 99 02 00 08 99 02 00 08 99 02 00 08     U#..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	cd 1e 00 08 99 02 00 08 dd 1e 00 08 31 34 00 08     ............14..
 80001ac:	21 34 00 08 99 02 00 08 99 02 00 08 99 02 00 08     !4..............
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c003850 	.word	0x0c003850
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000044 	.word	0x00000044
 8000254:	0c003850 	.word	0x0c003850
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8844 	.word	0x1ffe8844
 8000264:	00000158 	.word	0x00000158
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08003745 	.word	0x08003745
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08003711 	.word	0x08003711

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f003 f8eb 	bl	8003488 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f003 f953 	bl	800355c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f003 f932 	bl	8003548 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fab7 	bl	8000b04 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 faef 	bl	8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fada 	bl	8000b5c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa72 	bl	8000ab8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 faf4 	bl	8000bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb19 	bl	8000c40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb2a 	bl	8000c88 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb17 	bl	8000c68 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb24 	bl	8000ca8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0f1b      	lsrs	r3, r3, #28
 8000970:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000978:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	461a      	mov	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000988:	4413      	add	r3, r2
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	50004648 	.word	0x50004648

0800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	0f1b      	lsrs	r3, r3, #28
 80009a8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009b0:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009c0:	4413      	add	r3, r2
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	50004640 	.word	0x50004640

080009e4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f2:	f023 0302 	bic.w	r3, r3, #2
 80009f6:	6153      	str	r3, [r2, #20]
}
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	50004710 	.word	0x50004710

08000a04 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a1a:	bf00      	nop
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a34:	491e      	ldr	r1, [pc, #120]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a42:	4313      	orrs	r3, r2
 8000a44:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f023 0310 	bic.w	r3, r3, #16
 8000a5c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a68:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a6a:	bf00      	nop
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f9      	beq.n	8000a6c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a84:	bf00      	nop
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f9      	bne.n	8000a86 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a9c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	50004710 	.word	0x50004710
 8000ab4:	50004160 	.word	0x50004160

08000ab8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000acc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10e      	bne.n	8000af2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ade:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000ae0:	2064      	movs	r0, #100	; 0x64
 8000ae2:	f7ff fd13 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f7ff fd0a 	bl	800050c <XMC_SCU_lDelay>
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	50004710 	.word	0x50004710

08000b04 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b1a:	bf00      	nop
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f9      	beq.n	8000b1c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00a      	beq.n	8000b4a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b3c:	bf00      	nop
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f9      	bne.n	8000b3e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	50004200 	.word	0x50004200
 8000b58:	50004400 	.word	0x50004400

08000b5c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	50004300 	.word	0x50004300

08000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b88:	f7ff fcee 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b96:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b98:	bf00      	nop
 8000b9a:	f7ff fcd9 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f8      	beq.n	8000b9a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ba8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bac:	f7ff fcdc 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bb6:	bf00      	nop
 8000bb8:	f7ff fcca 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f8      	beq.n	8000bb8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bca:	f7ff fccd 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bda:	bf00      	nop
 8000bdc:	f7ff fcb8 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f8      	beq.n	8000bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	50004300 	.word	0x50004300

08000bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfe:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c00:	4d0d      	ldr	r5, [pc, #52]	; (8000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c0a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c0e:	f002 fc9b 	bl	8003548 <OSCHP_GetFrequency>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c16:	fba3 2302 	umull	r2, r3, r3, r2
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c20:	4323      	orrs	r3, r4
 8000c22:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c2e:	6053      	str	r3, [r2, #4]
}
 8000c30:	bdb0      	pop	{r4, r5, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	50004710 	.word	0x50004710
 8000c38:	50004700 	.word	0x50004700
 8000c3c:	6b5fca6b 	.word	0x6b5fca6b

08000c40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c4c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c50:	bf0c      	ite	eq
 8000c52:	2301      	moveq	r3, #1
 8000c54:	2300      	movne	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	50004710 	.word	0x50004710

08000c68 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	6053      	str	r3, [r2, #4]
}
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	50004710 	.word	0x50004710

08000c88 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	50004710 	.word	0x50004710

08000ca8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	81fb      	strh	r3, [r7, #14]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd69 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	f040 808b 	bne.w	8000de0 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cd0:	f002 fc3a 	bl	8003548 <OSCHP_GetFrequency>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	059b      	lsls	r3, r3, #22
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e002      	b.n	8000cea <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ce4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ce8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fb02 f203 	mul.w	r2, r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	0d9b      	lsrs	r3, r3, #22
 8000d06:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d08:	4a49      	ldr	r2, [pc, #292]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d14:	bf00      	nop
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d22:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d2e:	4940      	ldr	r1, [pc, #256]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d36:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	0212      	lsls	r2, r2, #8
 8000d3e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d46:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d52:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d5e:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f023 0310 	bic.w	r3, r3, #16
 8000d68:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d76:	bf00      	nop
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d84:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d90:	bf00      	nop
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4a25      	ldr	r2, [pc, #148]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	0d9b      	lsrs	r3, r3, #22
 8000daa:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dac:	6a3a      	ldr	r2, [r7, #32]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d202      	bcs.n	8000dba <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000db4:	6938      	ldr	r0, [r7, #16]
 8000db6:	f000 f845 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	0d9b      	lsrs	r3, r3, #22
 8000dc8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dca:	6a3a      	ldr	r2, [r7, #32]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d202      	bcs.n	8000dd8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd2:	6938      	ldr	r0, [r7, #16]
 8000dd4:	f000 f836 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000dd8:	6a38      	ldr	r0, [r7, #32]
 8000dda:	f000 f833 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dde:	e01c      	b.n	8000e1a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000de0:	4913      	ldr	r1, [pc, #76]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000dee:	4313      	orrs	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000df2:	bf00      	nop
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f9      	beq.n	8000df4 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e0c:	bf00      	nop
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f9      	beq.n	8000e0e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	aaaaaaab 	.word	0xaaaaaaab
 8000e30:	50004710 	.word	0x50004710
 8000e34:	f08080ff 	.word	0xf08080ff
 8000e38:	88888889 	.word	0x88888889
 8000e3c:	b60b60b7 	.word	0xb60b60b7
 8000e40:	50004160 	.word	0x50004160

08000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e4c:	490b      	ldr	r1, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e60:	bf00      	nop
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e6e:	2032      	movs	r0, #50	; 0x32
 8000e70:	f7ff fb4c 	bl	800050c <XMC_SCU_lDelay>
}
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	50004710 	.word	0x50004710

08000e80 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3204      	adds	r2, #4
 8000ea4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	23f8      	movs	r3, #248	; 0xf8
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	ea02 0103 	and.w	r1, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	1d02      	adds	r2, r0, #4
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3204      	adds	r2, #4
 8000ed8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000edc:	78bb      	ldrb	r3, [r7, #2]
 8000ede:	78f9      	ldrb	r1, [r7, #3]
 8000ee0:	f001 0103 	and.w	r1, r1, #3
 8000ee4:	00c9      	lsls	r1, r1, #3
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	ea42 0103 	orr.w	r1, r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	1d02      	adds	r2, r0, #4
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fa52 	bl	80013f8 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <XMC_I2C_CH_InitEx+0x5c>)
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	88db      	ldrh	r3, [r3, #6]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f000 f81d 	bl	8000fa0 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f000 f83b 	bl	8000ff4 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2200      	movs	r2, #0
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	073f0303 	.word	0x073f0303

08000fa0 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8000fb2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8000fb6:	d10e      	bne.n	8000fd6 <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8000fce:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd4:	e008      	b.n	8000fe8 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d819      	bhi.n	800103e <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	4619      	mov	r1, r3
 8001022:	220a      	movs	r2, #10
 8001024:	f000 faa6 	bl	8001574 <XMC_USIC_CH_SetBaudrateEx>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
 800102c:	e027      	b.n	800107e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	220a      	movs	r2, #10
 8001034:	f000 fa2c 	bl	8001490 <XMC_USIC_CH_SetBaudrate>
 8001038:	4603      	mov	r3, r0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e01f      	b.n	800107e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d819      	bhi.n	800107a <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	4619      	mov	r1, r3
 800105e:	2219      	movs	r2, #25
 8001060:	f000 fa88 	bl	8001574 <XMC_USIC_CH_SetBaudrateEx>
 8001064:	4603      	mov	r3, r0
 8001066:	75fb      	strb	r3, [r7, #23]
 8001068:	e009      	b.n	800107e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	2219      	movs	r2, #25
 8001070:	f000 fa0e 	bl	8001490 <XMC_USIC_CH_SetBaudrate>
 8001074:	4603      	mov	r3, r0
 8001076:	75fb      	strb	r3, [r7, #23]
 8001078:	e001      	b.n	800107e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	000186a0 	.word	0x000186a0
 800108c:	00061a80 	.word	0x00061a80

08001090 <XMC_I2C_CH_MasterStop>:
  }
}

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800109e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d111      	bne.n	80010ca <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80010a6:	bf00      	nop
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <XMC_USIC_CH_GetTransmitBufferStatus>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b80      	cmp	r3, #128	; 0x80
 80010b2:	d0f9      	beq.n	80010a8 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ba:	f7ff ff31 	bl	8000f20 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80010c8:	e004      	b.n	80010d4 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop

080010dc <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d110      	bne.n	8001118 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80010f6:	bf00      	nop
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff01 	bl	8000f00 <XMC_USIC_CH_GetTransmitBufferStatus>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b80      	cmp	r3, #128	; 0x80
 8001102:	d0f9      	beq.n	80010f8 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110a:	f7ff ff09 	bl	8000f20 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800110e:	78fa      	ldrb	r2, [r7, #3]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001116:	e003      	b.n	8001120 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop

08001128 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001136:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d111      	bne.n	8001162 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800113e:	bf00      	nop
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fedd 	bl	8000f00 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001146:	4603      	mov	r3, r0
 8001148:	2b80      	cmp	r3, #128	; 0x80
 800114a:	d0f9      	beq.n	8001140 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	f7ff fee5 	bl	8000f20 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001160:	e004      	b.n	800116c <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001182:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d111      	bne.n	80011ae <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800118a:	bf00      	nop
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff feb7 	bl	8000f00 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001192:	4603      	mov	r3, r0
 8001194:	2b80      	cmp	r3, #128	; 0x80
 8001196:	d0f9      	beq.n	800118c <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119e:	f7ff febf 	bl	8000f20 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011ac:	e004      	b.n	80011b8 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80011ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e003      	b.n	80011e6 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80011e4:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <XMC_I2C_CH_EnableEvent+0x34>)
 8001216:	400b      	ands	r3, r1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	41fc0000 	.word	0x41fc0000

0800122c <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <XMC_I2C_CH_DisableEvent+0x38>)
 8001250:	400b      	ands	r3, r1
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	41fc0000 	.word	0x41fc0000

08001268 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 80012b2:	2310      	movs	r3, #16
 80012b4:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f89e 	bl	80013f8 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	7a1b      	ldrb	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	7a1b      	ldrb	r3, [r3, #8]
 80012c8:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d014      	beq.n	80012fa <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d009      	beq.n	80012ec <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	f000 f945 	bl	8001574 <XMC_USIC_CH_SetBaudrateEx>
 80012ea:	e006      	b.n	80012fa <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	4619      	mov	r1, r3
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	f000 f8cb 	bl	8001490 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	3b01      	subs	r3, #1
 8001300:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	3301      	adds	r3, #1
 8001308:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800130a:	4313      	orrs	r3, r2
 800130c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	795b      	ldrb	r3, [r3, #5]
 800131c:	3b01      	subs	r3, #1
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	799b      	ldrb	r3, [r3, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d009      	beq.n	8001344 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	799b      	ldrb	r3, [r3, #6]
 8001338:	3b01      	subs	r3, #1
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
 8001342:	e008      	b.n	8001356 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	3b01      	subs	r3, #1
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	895b      	ldrh	r3, [r3, #10]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop

08001378 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800138a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d110      	bne.n	80013b4 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001392:	bf00      	nop
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff67 	bl	8001268 <XMC_USIC_CH_GetTransmitBufferStatus>
 800139a:	4603      	mov	r3, r0
 800139c:	2b80      	cmp	r3, #128	; 0x80
 800139e:	d0f9      	beq.n	8001394 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a6:	f7ff ff6f 	bl	8001288 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80013b2:	e003      	b.n	80013bc <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop

080013c4 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80013d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013de:	81fb      	strh	r3, [r7, #14]
 80013e0:	e003      	b.n	80013ea <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80013e8:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80013ea:	89fb      	ldrh	r3, [r7, #14]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <XMC_USIC_CH_Enable+0x74>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d003      	beq.n	8001410 <XMC_USIC_CH_Enable+0x18>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a19      	ldr	r2, [pc, #100]	; (8001470 <XMC_USIC_CH_Enable+0x78>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d103      	bne.n	8001418 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001410:	4818      	ldr	r0, [pc, #96]	; (8001474 <XMC_USIC_CH_Enable+0x7c>)
 8001412:	f000 f9f1 	bl	80017f8 <XMC_USIC_Enable>
 8001416:	e016      	b.n	8001446 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <XMC_USIC_CH_Enable+0x80>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d003      	beq.n	8001428 <XMC_USIC_CH_Enable+0x30>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <XMC_USIC_CH_Enable+0x84>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d103      	bne.n	8001430 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001428:	4815      	ldr	r0, [pc, #84]	; (8001480 <XMC_USIC_CH_Enable+0x88>)
 800142a:	f000 f9e5 	bl	80017f8 <XMC_USIC_Enable>
 800142e:	e00a      	b.n	8001446 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a14      	ldr	r2, [pc, #80]	; (8001484 <XMC_USIC_CH_Enable+0x8c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <XMC_USIC_CH_Enable+0x48>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <XMC_USIC_CH_Enable+0x90>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <XMC_USIC_CH_Enable+0x94>)
 8001442:	f000 f9d9 	bl	80017f8 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800144c:	bf00      	nop
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f9      	beq.n	800144e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f023 020f 	bic.w	r2, r3, #15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40030000 	.word	0x40030000
 8001470:	40030200 	.word	0x40030200
 8001474:	40030008 	.word	0x40030008
 8001478:	48020000 	.word	0x48020000
 800147c:	48020200 	.word	0x48020200
 8001480:	48020008 	.word	0x48020008
 8001484:	48024000 	.word	0x48024000
 8001488:	48024200 	.word	0x48024200
 800148c:	48024008 	.word	0x48024008

08001490 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b63      	cmp	r3, #99	; 0x63
 80014a0:	d95a      	bls.n	8001558 <XMC_USIC_CH_SetBaudrate+0xc8>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d057      	beq.n	8001558 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80014a8:	f7ff f928 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80014b0:	fba3 2302 	umull	r2, r3, r3, r2
 80014b4:	095b      	lsrs	r3, r3, #5
 80014b6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4a2c      	ldr	r2, [pc, #176]	; (800156c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80014c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80014ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
 80014da:	e022      	b.n	8001522 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e0:	fb02 f203 	mul.w	r2, r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f0:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	0a9b      	lsrs	r3, r3, #10
 80014f6:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fe:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	d809      	bhi.n	800151c <XMC_USIC_CH_SetBaudrate+0x8c>
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	429a      	cmp	r2, r3
 800150e:	d205      	bcs.n	800151c <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	3b01      	subs	r3, #1
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1d9      	bne.n	80014dc <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800152c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800153a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	3a01      	subs	r2, #1
 8001540:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001542:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800154a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001556:	e002      	b.n	800155e <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 800155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001562:	4618      	mov	r0, r3
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	51eb851f 	.word	0x51eb851f
 8001570:	fc0080ef 	.word	0xfc0080ef

08001574 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001580:	f7ff f8bc 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001584:	4603      	mov	r3, r0
 8001586:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8001596:	6a3a      	ldr	r2, [r7, #32]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	429a      	cmp	r2, r3
 800159c:	dd5f      	ble.n	800165e <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800159e:	6a3a      	ldr	r2, [r7, #32]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80015a8:	e010      	b.n	80015cc <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	3301      	adds	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	fb03 f302 	mul.w	r3, r3, r2
 80015c0:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80015c2:	6a3a      	ldr	r2, [r7, #32]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d8e9      	bhi.n	80015aa <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80015d6:	6a3a      	ldr	r2, [r7, #32]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	3301      	adds	r3, #1
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800160e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1acb      	subs	r3, r1, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	bfb8      	it	lt
 800161c:	425b      	neglt	r3, r3
 800161e:	429a      	cmp	r2, r3
 8001620:	da02      	bge.n	8001628 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	3301      	adds	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001640:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	3a01      	subs	r2, #1
 8001646:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001648:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	3b01      	subs	r3, #1
 800164e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001650:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165c:	e002      	b.n	8001664 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001668:	4618      	mov	r0, r3
 800166a:	3730      	adds	r7, #48	; 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	fc0080ef 	.word	0xfc0080ef

08001674 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800168a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800169c:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	0211      	lsls	r1, r2, #8
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80016aa:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 80016ac:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	f8ffc0c0 	.word	0xf8ffc0c0

080016c4 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80016da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80016ec:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	0211      	lsls	r1, r2, #8
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80016fa:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80016fc:	4313      	orrs	r3, r2
 80016fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	efffc0c0 	.word	0xefffc0c0

08001718 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	460b      	mov	r3, r1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800172c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop

08001748 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	460b      	mov	r3, r1
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	2107      	movs	r1, #7
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800176e:	431a      	orrs	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	460b      	mov	r3, r1
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	2107      	movs	r1, #7
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	460b      	mov	r3, r1
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	2107      	movs	r1, #7
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <XMC_USIC_Enable+0xac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d118      	bne.n	800183a <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001808:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800180c:	f7ff f8aa 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001810:	bf00      	nop
 8001812:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001816:	f7ff f8c1 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f8      	bne.n	8001812 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001820:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001824:	f7fe ff2a 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001828:	bf00      	nop
 800182a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800182e:	f7fe ff41 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f8      	bne.n	800182a <XMC_USIC_Enable+0x32>
 8001838:	e030      	b.n	800189c <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <XMC_USIC_Enable+0xb0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d114      	bne.n	800186c <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001842:	481a      	ldr	r0, [pc, #104]	; (80018ac <XMC_USIC_Enable+0xb4>)
 8001844:	f7ff f88e 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001848:	bf00      	nop
 800184a:	4818      	ldr	r0, [pc, #96]	; (80018ac <XMC_USIC_Enable+0xb4>)
 800184c:	f7ff f8a6 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <XMC_USIC_Enable+0xb4>)
 8001858:	f7fe ff10 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 800185c:	bf00      	nop
 800185e:	4813      	ldr	r0, [pc, #76]	; (80018ac <XMC_USIC_Enable+0xb4>)
 8001860:	f7fe ff28 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <XMC_USIC_Enable+0x66>
 800186a:	e017      	b.n	800189c <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <XMC_USIC_Enable+0xb8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d113      	bne.n	800189c <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <XMC_USIC_Enable+0xbc>)
 8001876:	f7ff f875 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 800187a:	bf00      	nop
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <XMC_USIC_Enable+0xbc>)
 800187e:	f7ff f88d 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f9      	bne.n	800187c <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <XMC_USIC_Enable+0xbc>)
 800188a:	f7fe fef7 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 800188e:	bf00      	nop
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <XMC_USIC_Enable+0xbc>)
 8001892:	f7fe ff0f 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40030008 	.word	0x40030008
 80018a8:	48020008 	.word	0x48020008
 80018ac:	10000080 	.word	0x10000080
 80018b0:	48024008 	.word	0x48024008
 80018b4:	10000100 	.word	0x10000100

080018b8 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018fa:	b2db      	uxtb	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	43db      	mvns	r3, r3
 800191c:	401a      	ands	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop

08001930 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4798      	blx	r3
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]

  return status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop

080019f4 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d240      	bcs.n	8001a90 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d027      	beq.n	8001a6a <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001a1a:	e01a      	b.n	8001a52 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d212      	bcs.n	8001a4e <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fc9b 	bl	8001378 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e001      	b.n	8001a52 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8001a4e:	bf00      	nop
 8001a50:	e053      	b.n	8001afa <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff6a 	bl	8001930 <XMC_USIC_CH_TXFIFO_IsFull>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1d9      	bne.n	8001a1c <UART_lTransmitHandler+0x28>
 8001a68:	e047      	b.n	8001afa <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff fc7a 	bl	8001378 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	e034      	b.n	8001afa <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02c      	beq.n	8001afa <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ab6:	f7ff ff27 	bl	8001908 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001aba:	e006      	b.n	8001aca <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	f7ff fefd 	bl	80018c4 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001aca:	bf00      	nop
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff09 	bl	80018e8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b80      	cmp	r3, #128	; 0x80
 8001ada:	d0f7      	beq.n	8001acc <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4798      	blx	r3
      }
    }
  }
}
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04e      	beq.n	8001bb8 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001b1a:	e032      	b.n	8001b82 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d211      	bcs.n	8001b4c <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	18d4      	adds	r4, r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc44 	bl	80013c4 <XMC_UART_CH_GetReceivedData>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d114      	bne.n	8001b82 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001b68:	f7ff ff0a 	bl	8001980 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4798      	blx	r3
        }
        break;
 8001b7e:	e00b      	b.n	8001b98 <UART_lReceiveHandler+0x98>
 8001b80:	e00a      	b.n	8001b98 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff0e 	bl	80019a8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f083 0301 	eor.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1c1      	bne.n	8001b1c <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d23a      	bcs.n	8001c1a <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f000 f835 	bl	8001c20 <UART_lReconfigureRxFIFO>
 8001bb6:	e030      	b.n	8001c1a <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d211      	bcs.n	8001be8 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	18d4      	adds	r4, r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbf6 	bl	80013c4 <XMC_UART_CH_GetReceivedData>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d112      	bne.n	8001c1a <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001c04:	f7ff fe5e 	bl	80018c4 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4798      	blx	r3
      }
    }
  }
}
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d203      	bcs.n	8001c4e <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e002      	b.n	8001c54 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001c5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	f7ff fd57 	bl	8001718 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c7c:	0a1b      	lsrs	r3, r3, #8
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_EnableIRQ+0x34>)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	490d      	ldr	r1, [pc, #52]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	4909      	ldr	r1, [pc, #36]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
  }
}
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	bf28      	it	cs
 8001d36:	2306      	movcs	r3, #6
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	401a      	ands	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001d6c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001d8c:	78f8      	ldrb	r0, [r7, #3]
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	3306      	adds	r3, #6
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001da0:	431a      	orrs	r2, r3
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	1d83      	adds	r3, r0, #6
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f7ff fa6c 	bl	80012a4 <XMC_UART_CH_InitEx>
}
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop

08001dd4 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f023 030f 	bic.w	r3, r3, #15
 8001de4:	f043 0202 	orr.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8001e02:	482d      	ldr	r0, [pc, #180]	; (8001eb8 <UART_0_init+0xc0>)
 8001e04:	2104      	movs	r1, #4
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <UART_0_init+0xc4>)
 8001e08:	f7fe fac2 	bl	8000390 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <UART_0_init+0xc8>)
 8001e0e:	492d      	ldr	r1, [pc, #180]	; (8001ec4 <UART_0_init+0xcc>)
 8001e10:	f7ff ffd2 	bl	8001db8 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
 8001e14:	482a      	ldr	r0, [pc, #168]	; (8001ec0 <UART_0_init+0xc8>)
 8001e16:	2100      	movs	r1, #0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f7ff ffaf 	bl	8001d7c <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8001e1e:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <UART_0_init+0xc8>)
 8001e20:	2110      	movs	r1, #16
 8001e22:	2204      	movs	r2, #4
 8001e24:	2301      	movs	r3, #1
 8001e26:	f7ff fc25 	bl	8001674 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8001e2a:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <UART_0_init+0xc8>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2204      	movs	r2, #4
 8001e30:	2300      	movs	r3, #0
 8001e32:	f7ff fc47 	bl	80016c4 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8001e36:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <UART_0_init+0xc8>)
 8001e38:	f7ff ffcc 	bl	8001dd4 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8001e3c:	481e      	ldr	r0, [pc, #120]	; (8001eb8 <UART_0_init+0xc0>)
 8001e3e:	2105      	movs	r1, #5
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <UART_0_init+0xd0>)
 8001e42:	f7fe faa5 	bl	8000390 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001e46:	481e      	ldr	r0, [pc, #120]	; (8001ec0 <UART_0_init+0xc8>)
 8001e48:	2110      	movs	r1, #16
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f7ff fc7c 	bl	8001748 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001e50:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <UART_0_init+0xc8>)
 8001e52:	2110      	movs	r1, #16
 8001e54:	2203      	movs	r2, #3
 8001e56:	f7ff fc93 	bl	8001780 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001e5a:	4819      	ldr	r0, [pc, #100]	; (8001ec0 <UART_0_init+0xc8>)
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f7ff fcac 	bl	80017bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8001e64:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <UART_0_init+0xc8>)
 8001e66:	2113      	movs	r1, #19
 8001e68:	2205      	movs	r2, #5
 8001e6a:	f7ff fca7 	bl	80017bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001e6e:	f7ff feff 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4618      	mov	r0, r3
 8001e76:	213f      	movs	r1, #63	; 0x3f
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f7ff ff4d 	bl	8001d18 <NVIC_EncodePriority>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2057      	movs	r0, #87	; 0x57
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff ff1e 	bl	8001cc4 <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
 8001e88:	2057      	movs	r0, #87	; 0x57
 8001e8a:	f7ff feff 	bl	8001c8c <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001e8e:	f7ff feef 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4618      	mov	r0, r3
 8001e96:	213f      	movs	r1, #63	; 0x3f
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f7ff ff3d 	bl	8001d18 <NVIC_EncodePriority>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2059      	movs	r0, #89	; 0x59
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7ff ff0e 	bl	8001cc4 <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
 8001ea8:	2059      	movs	r0, #89	; 0x59
 8001eaa:	f7ff feef 	bl	8001c8c <__NVIC_EnableIRQ>
  return status;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	48028100 	.word	0x48028100
 8001ebc:	080037e4 	.word	0x080037e4
 8001ec0:	40030000 	.word	0x40030000
 8001ec4:	08003790 	.word	0x08003790
 8001ec8:	0800379c 	.word	0x0800379c

08001ecc <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8001ed0:	4801      	ldr	r0, [pc, #4]	; (8001ed8 <USIC0_3_IRQHandler+0xc>)
 8001ed2:	f7ff fd8f 	bl	80019f4 <UART_lTransmitHandler>
}
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	1ffe8800 	.word	0x1ffe8800

08001edc <USIC0_5_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8001ee0:	4801      	ldr	r0, [pc, #4]	; (8001ee8 <USIC0_5_IRQHandler+0xc>)
 8001ee2:	f7ff fe0d 	bl	8001b00 <UART_lReceiveHandler>
}
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	1ffe8800 	.word	0x1ffe8800

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ef8:	0a1b      	lsrs	r3, r3, #8
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	490d      	ldr	r1, [pc, #52]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	4909      	ldr	r1, [pc, #36]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
  }
}
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	bf28      	it	cs
 8001f7a:	2306      	movcs	r3, #6
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3306      	adds	r3, #6
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2201      	movs	r2, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	1e59      	subs	r1, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001fb0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	213f      	movs	r1, #63	; 0x3f
 8001fe4:	f7ff ff90 	bl	8001f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8002004:	b490      	push	{r4, r7}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8002010:	496b      	ldr	r1, [pc, #428]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3318      	adds	r3, #24
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8002024:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a62      	ldr	r2, [pc, #392]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002038:	4413      	add	r3, r2
 800203a:	4a62      	ldr	r2, [pc, #392]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e0bb      	b.n	80021b8 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002040:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800204a:	e0ab      	b.n	80021a4 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	461a      	mov	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dc7a      	bgt.n	8002154 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d026      	beq.n	80020b4 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002076:	4413      	add	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	4850      	ldr	r0, [pc, #320]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4403      	add	r3, r0
 800208c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800208e:	494c      	ldr	r1, [pc, #304]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4a45      	ldr	r2, [pc, #276]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020ac:	441a      	add	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	e01c      	b.n	80020ee <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	4841      	ldr	r0, [pc, #260]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80020c8:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020d8:	4413      	add	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4a36      	ldr	r2, [pc, #216]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020e8:	4413      	add	r3, r2
 80020ea:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80020ec:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80020ee:	4934      	ldr	r1, [pc, #208]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	18d1      	adds	r1, r2, r3
 8002104:	482e      	ldr	r0, [pc, #184]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3318      	adds	r3, #24
 8002114:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002116:	492a      	ldr	r1, [pc, #168]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	4826      	ldr	r0, [pc, #152]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4403      	add	r3, r0
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6998      	ldr	r0, [r3, #24]
 8002138:	4c21      	ldr	r4, [pc, #132]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4423      	add	r3, r4
 8002146:	3318      	adds	r3, #24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1ac3      	subs	r3, r0, r3
 800214c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e024      	b.n	800219e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	dd21      	ble.n	800219e <SYSTIMER_lInsertTimerList+0x19a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11d      	bne.n	800219e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8002162:	4917      	ldr	r1, [pc, #92]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002180:	441a      	add	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	3318      	adds	r3, #24
 8002198:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <SYSTIMER_lInsertTimerList+0x1b4>
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	f083 0301 	eor.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f af4a 	bne.w	800204c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc90      	pop	{r4, r7}
 80021be:	4770      	bx	lr
 80021c0:	1ffe887c 	.word	0x1ffe887c
 80021c4:	1ffe8860 	.word	0x1ffe8860

080021c8 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4a29      	ldr	r2, [pc, #164]	; (8002280 <SYSTIMER_lRemoveTimerList+0xb8>)
 80021dc:	4413      	add	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <SYSTIMER_lRemoveTimerList+0x30>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <SYSTIMER_lRemoveTimerList+0xbc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e03d      	b.n	8002274 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d114      	bne.n	800222a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002206:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <SYSTIMER_lRemoveTimerList+0xbc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6991      	ldr	r1, [r2, #24]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6992      	ldr	r2, [r2, #24]
 800221e:	440a      	add	r2, r1
 8002220:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e024      	b.n	8002274 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e018      	b.n	8002274 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	6852      	ldr	r2, [r2, #4]
 8002254:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	6991      	ldr	r1, [r2, #24]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	6992      	ldr	r2, [r2, #24]
 8002264:	440a      	add	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  }
}
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	1ffe887c 	.word	0x1ffe887c
 8002284:	1ffe8860 	.word	0x1ffe8860

08002288 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <SYSTIMER_lTimerHandler+0xc4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002294:	e050      	b.n	8002338 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff8f 	bl	80021c8 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	461a      	mov	r2, r3
 80022b6:	2301      	movs	r3, #1
 80022b8:	4093      	lsls	r3, r2
 80022ba:	43da      	mvns	r2, r3
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <SYSTIMER_lTimerHandler+0xc8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4013      	ands	r3, r2
 80022c2:	4a23      	ldr	r2, [pc, #140]	; (8002350 <SYSTIMER_lTimerHandler+0xc8>)
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e034      	b.n	8002332 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7b1b      	ldrb	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d112      	bne.n	80022f6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b5b      	ldrb	r3, [r3, #13]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d12c      	bne.n	8002332 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff73 	bl	80021c8 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6912      	ldr	r2, [r2, #16]
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
 80022f4:	e01d      	b.n	8002332 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7b1b      	ldrb	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d118      	bne.n	8002330 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7b5b      	ldrb	r3, [r3, #13]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d115      	bne.n	8002332 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff5c 	bl	80021c8 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe71 	bl	8002004 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6912      	ldr	r2, [r2, #16]
 800232a:	4610      	mov	r0, r2
 800232c:	4798      	blx	r3
 800232e:	e000      	b.n	8002332 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8002330:	e009      	b.n	8002346 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <SYSTIMER_lTimerHandler+0xc4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <SYSTIMER_lTimerHandler+0xbe>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0a7      	beq.n	8002296 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	1ffe8860 	.word	0x1ffe8860
 8002350:	1ffe8864 	.word	0x1ffe8864

08002354 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <SysTick_Handler+0x40>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <SysTick_Handler+0x44>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <SysTick_Handler+0x44>)
 8002368:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d905      	bls.n	8002384 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
 8002382:	e004      	b.n	800238e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800238a:	f7ff ff7d 	bl	8002288 <SYSTIMER_lTimerHandler>
    }
  }
}
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	1ffe8860 	.word	0x1ffe8860
 8002398:	1ffe8868 	.word	0x1ffe8868

0800239c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d020      	beq.n	80023f8 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <SYSTIMER_Init+0x68>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80023bc:	4812      	ldr	r0, [pc, #72]	; (8002408 <SYSTIMER_Init+0x6c>)
 80023be:	f7ff fdff 	bl	8001fc0 <SysTick_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d015      	beq.n	80023f8 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80023cc:	f7ff fd8e 	bl	8001eec <__NVIC_GetPriorityGrouping>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4618      	mov	r0, r3
 80023d4:	213f      	movs	r1, #63	; 0x3f
 80023d6:	2200      	movs	r2, #0
 80023d8:	f7ff fdc0 	bl	8001f5c <NVIC_EncodePriority>
 80023dc:	4603      	mov	r3, r0
 80023de:	f04f 30ff 	mov.w	r0, #4294967295
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff fd90 	bl	8001f08 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <SYSTIMER_Init+0x70>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	1ffe8860 	.word	0x1ffe8860
 8002408:	00023280 	.word	0x00023280
 800240c:	1ffe8864 	.word	0x1ffe8864

08002410 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	460b      	mov	r3, r1
 800241e:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002432:	d202      	bcs.n	800243a <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e07b      	b.n	8002532 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e075      	b.n	800252c <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <SYSTIMER_CreateTimer+0x130>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d16a      	bne.n	8002526 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2201      	movs	r2, #1
 8002454:	409a      	lsls	r2, r3
 8002456:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <SYSTIMER_CreateTimer+0x130>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	4a38      	ldr	r2, [pc, #224]	; (8002540 <SYSTIMER_CreateTimer+0x130>)
 800245e:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8002460:	4938      	ldr	r1, [pc, #224]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3310      	adds	r3, #16
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8002474:	4933      	ldr	r1, [pc, #204]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3308      	adds	r3, #8
 8002484:	7afa      	ldrb	r2, [r7, #11]
 8002486:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002488:	492e      	ldr	r1, [pc, #184]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3308      	adds	r3, #8
 8002498:	2202      	movs	r2, #2
 800249a:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <SYSTIMER_CreateTimer+0x138>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	4825      	ldr	r0, [pc, #148]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4403      	add	r3, r0
 80024ba:	3318      	adds	r3, #24
 80024bc:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3318      	adds	r3, #24
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 80024d2:	491c      	ldr	r1, [pc, #112]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3308      	adds	r3, #8
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 80024e6:	4917      	ldr	r1, [pc, #92]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3310      	adds	r3, #16
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 80024fa:	4912      	ldr	r1, [pc, #72]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 800250c:	490d      	ldr	r1, [pc, #52]	; (8002544 <SYSTIMER_CreateTimer+0x134>)
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
        break;
 8002524:	e005      	b.n	8002532 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3301      	adds	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b07      	cmp	r3, #7
 8002530:	d986      	bls.n	8002440 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8002532:	69fb      	ldr	r3, [r7, #28]
}  
 8002534:	4618      	mov	r0, r3
 8002536:	3724      	adds	r7, #36	; 0x24
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	1ffe8864 	.word	0x1ffe8864
 8002544:	1ffe887c 	.word	0x1ffe887c
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0c      	blt.n	8002578 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	4909      	ldr	r1, [pc, #36]	; (8002584 <__NVIC_ClearPendingIRQ+0x38>)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	3360      	adds	r3, #96	; 0x60
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	43db      	mvns	r3, r3
 8002604:	401a      	ands	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002626:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800266a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	43db      	mvns	r3, r3
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	f7fe fff7 	bl	8001718 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff79 	bl	8002634 <XMC_USIC_CH_TXFIFO_IsFull>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ffa7 	bl	80026ac <XMC_USIC_CH_RXFIFO_IsEmpty>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fd23 	bl	80011c0 <XMC_I2C_CH_GetReceivedData>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7fe fc9f 	bl	80010dc <XMC_I2C_CH_MasterTransmit>
}
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	f7fe fd39 	bl	800122c <XMC_I2C_CH_DisableEvent>
}
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fcab 	bl	8001128 <XMC_I2C_CH_MasterReceiveAck>
}
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcc5 	bl	8001174 <XMC_I2C_CH_MasterReceiveNack>
}
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	2110      	movs	r1, #16
 8002800:	f7ff ff74 	bl	80026ec <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fc41 	bl	8001090 <XMC_I2C_CH_MasterStop>
}
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d202      	bcs.n	800282c <calculate_minfifosize+0x18>
  {
    result = a;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e001      	b.n	8002830 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e001      	b.n	8002860 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop

0800286c <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff2a 	bl	80026d4 <XMC_I2C_CH_GetStatusFlag>
 8002880:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4013      	ands	r3, r2
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	f7ff ff23 	bl	80026ec <XMC_I2C_CH_ClearStatusFlag>
}
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80028c4:	f7ff ffd2 	bl	800286c <I2C_MASTER_GetFlagStatus>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d011      	beq.n	80028f2 <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028d8:	f7ff fe8a 	bl	80025f0 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e6:	f7ff fe4f 	bl	8002588 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 faf6 	bl	8002edc <I2C_MASTER_ProtocolHandler>
 80028f0:	e105      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8082 	bne.w	8002a00 <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05a      	beq.n	80029be <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d22e      	bcs.n	8002972 <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800291a:	f7ff ff43 	bl	80027a4 <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002928:	f7ff fe50 	bl	80025cc <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800292c:	e017      	b.n	800295e <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d20f      	bcs.n	800295a <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4619      	mov	r1, r3
 800294a:	f7ff ff1b 	bl	8002784 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	e001      	b.n	800295e <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 800295a:	bf00      	nop
 800295c:	e0cf      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fee6 	bl	8002730 <I2C_MASTER_IsTXFIFOFull>
 8002964:	4603      	mov	r3, r0
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1de      	bne.n	800292e <I2C_MASTER_TransmitHandler+0x82>
 8002970:	e0c5      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800297c:	f7ff fe38 	bl	80025f0 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002988:	b25b      	sxtb	r3, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fdde 	bl	800254c <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8002990:	bf00      	nop
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fe60 	bl	800265c <XMC_USIC_CH_TXFIFO_IsEmpty>
 800299c:	4603      	mov	r3, r0
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f4      	bne.n	8002992 <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a4 	beq.w	8002afe <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8a4 	bl	8002b04 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 80029bc:	e09f      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20f      	bcs.n	80029ea <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	f7ff fed3 	bl	8002784 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e089      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8083 	beq.w	8002afe <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f883 	bl	8002b04 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 80029fe:	e07e      	b.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d054      	beq.n	8002ab6 <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a20:	461a      	mov	r2, r3
 8002a22:	2301      	movs	r3, #1
 8002a24:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002a30:	4619      	mov	r1, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	408b      	lsls	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7ff feeb 	bl	8002814 <calculate_minfifosize>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e001      	b.n	8002a48 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8002a44:	2302      	movs	r3, #2
 8002a46:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a52:	f7ff fdcd 	bl	80025f0 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002a56:	e023      	b.n	8002aa0 <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d21c      	bcs.n	8002a9e <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d107      	bne.n	8002a82 <I2C_MASTER_TransmitHandler+0x1d6>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d103      	bne.n	8002a82 <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff feac 	bl	80027d8 <I2C_MASTER_ReceiveNACK>
 8002a80:	e002      	b.n	8002a88 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe9c 	bl	80027c0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d301      	bcc.n	8002aa0 <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 8002a9c:	e00a      	b.n	8002ab4 <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 8002a9e:	e009      	b.n	8002ab4 <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fe45 	bl	8002730 <I2C_MASTER_IsTXFIFOFull>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1d2      	bne.n	8002a58 <I2C_MASTER_TransmitHandler+0x1ac>
 8002ab2:	e017      	b.n	8002ae4 <I2C_MASTER_TransmitHandler+0x238>
 8002ab4:	e016      	b.n	8002ae4 <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <I2C_MASTER_TransmitHandler+0x228>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d103      	bne.n	8002ad4 <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fe83 	bl	80027d8 <I2C_MASTER_ReceiveNACK>
 8002ad2:	e002      	b.n	8002ada <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe73 	bl	80027c0 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d104      	bne.n	8002afe <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002afa:	f7ff fe53 	bl	80027a4 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b18:	f7ff fe44 	bl	80027a4 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fe5f 	bl	80027f0 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002b32:	bf00      	nop
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fd37 	bl	80025ac <XMC_USIC_CH_GetTransmitBufferStatus>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d0f7      	beq.n	8002b34 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4798      	blx	r3
  }
}
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_MASTER_AbortTransmitIRQ>:
  }
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  handle->runtime->tx_busy = false;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  handle->runtime->tx_data = NULL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
  handle->runtime->bus_acquired = false;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <I2C_MASTER_AbortTransmitIRQ+0x48>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b9e:	f7ff fd27 	bl	80025f0 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fd36 	bl	8002618 <XMC_USIC_CH_TXFIFO_Flush>
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bb2:	f7ff fdf7 	bl	80027a4 <I2C_MASTER_DisableEvent>
}
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8111 	beq.w	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80c7 	beq.w	8002d78 <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8002bea:	e020      	b.n	8002c2e <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	18d4      	adds	r4, r2, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fdb6 	bl	8002768 <I2C_MASTER_GetReceivedByte>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d10b      	bne.n	8002c2e <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002c28:	f7ff fd2c 	bl	8002684 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8002c2c:	e008      	b.n	8002c40 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fd8c 	bl	800274c <I2C_MASTER_IsRXFIFOEmpty>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1d5      	bne.n	8002bec <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d277      	bcs.n	8002d3c <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f000 f983 	bl	8002f64 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d015      	beq.n	8002c96 <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c72:	461a      	mov	r2, r3
 8002c74:	2301      	movs	r3, #1
 8002c76:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002c82:	4619      	mov	r1, r3
 8002c84:	2301      	movs	r3, #1
 8002c86:	408b      	lsls	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7ff fdc2 	bl	8002814 <calculate_minfifosize>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73bb      	strb	r3, [r7, #14]
 8002c94:	e001      	b.n	8002c9a <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8002c96:	2302      	movs	r3, #2
 8002c98:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d033      	beq.n	8002d0e <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002ca6:	e027      	b.n	8002cf8 <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d220      	bcs.n	8002cf6 <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d107      	bne.n	8002cd2 <I2C_MASTER_ReceiveHandler+0x116>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d103      	bne.n	8002cd2 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fd84 	bl	80027d8 <I2C_MASTER_ReceiveNACK>
 8002cd0:	e002      	b.n	8002cd8 <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fd74 	bl	80027c0 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d303      	bcc.n	8002cf8 <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
                break;
 8002cf4:	e00a      	b.n	8002d0c <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8002cf6:	e009      	b.n	8002d0c <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fd19 	bl	8002730 <I2C_MASTER_IsTXFIFOFull>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f083 0301 	eor.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ce      	bne.n	8002ca8 <I2C_MASTER_ReceiveHandler+0xec>
 8002d0a:	e017      	b.n	8002d3c <I2C_MASTER_ReceiveHandler+0x180>
 8002d0c:	e016      	b.n	8002d3c <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <I2C_MASTER_ReceiveHandler+0x170>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d103      	bne.n	8002d2c <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fd57 	bl	80027d8 <I2C_MASTER_ReceiveNACK>
 8002d2a:	e002      	b.n	8002d32 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fd47 	bl	80027c0 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d15a      	bne.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002d52:	f7ff fc97 	bl	8002684 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002d60:	f7ff fc12 	bl	8002588 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d046      	beq.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f847 	bl	8002e04 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8002d76:	e042      	b.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	18d4      	adds	r4, r2, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fcf0 	bl	8002768 <I2C_MASTER_GetReceivedByte>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d21d      	bcs.n	8002dde <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d227      	bcs.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <I2C_MASTER_ReceiveHandler+0x210>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d103      	bne.n	8002dcc <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fd07 	bl	80027d8 <I2C_MASTER_ReceiveNACK>
 8002dca:	e002      	b.n	8002dd2 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fcf7 	bl	80027c0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e00f      	b.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002de8:	f7ff fbce 	bl	8002588 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f803 	bl	8002e04 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}

08002e04 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10f      	bne.n	8002e3a <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002e1a:	bf00      	nop
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fbc3 	bl	80025ac <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d0f7      	beq.n	8002e1c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fcdb 	bl	80027f0 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002e3a:	bf00      	nop
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fbb3 	bl	80025ac <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d0f7      	beq.n	8002e3c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	4798      	blx	r3
  }
}
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_MASTER_lAbortReceiveIRQ>:


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  handle->runtime->tx_busy = false;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  handle->runtime->rx_data = NULL;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]

  handle->runtime->bus_acquired = false;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <I2C_MASTER_lAbortReceiveIRQ+0x4a>
  {
    XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002eb8:	f7ff fbe4 	bl	8002684 <XMC_USIC_CH_RXFIFO_DisableEvent>
 8002ebc:	e006      	b.n	8002ecc <I2C_MASTER_lAbortReceiveIRQ+0x58>
                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  }
  else
  {
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002ec8:	f7ff fb5e 	bl	8002588 <XMC_USIC_CH_DisableEvent>
                                                 (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ed2:	f7ff fc67 	bl	80027a4 <I2C_MASTER_DisableEvent>
}
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fbf3 	bl	80026d4 <XMC_I2C_CH_GetStatusFlag>
 8002eee:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <I2C_MASTER_ProtocolHandler+0x38>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	2120      	movs	r1, #32
 8002f08:	f7ff fcc2 	bl	8002890 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <I2C_MASTER_ProtocolHandler+0x5c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	2140      	movs	r1, #64	; 0x40
 8002f2c:	f7ff fcb0 	bl	8002890 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <I2C_MASTER_ProtocolHandler+0x82>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f52:	f7ff fc9d 	bl	8002890 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4798      	blx	r3
  }
}
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	4093      	lsls	r3, r2
 8002f98:	75fb      	strb	r3, [r7, #23]
 8002f9a:	e001      	b.n	8002fa0 <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8002fa0:	7dfa      	ldrb	r2, [r7, #23]
 8002fa2:	7dbb      	ldrb	r3, [r7, #22]
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7ff fc34 	bl	8002814 <calculate_minfifosize>
 8002fac:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	6939      	ldr	r1, [r7, #16]
 8002fb2:	f7ff fc2f 	bl	8002814 <calculate_minfifosize>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f7ff fb9d 	bl	800270c <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <I2C_MASTER_AbortTransmit+0x20>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fdb7 	bl	8002b64 <I2C_MASTER_AbortTransmitIRQ>
 8002ff6:	e007      	b.n	8003008 <I2C_MASTER_AbortTransmit+0x30>
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <I2C_MASTER_AbortTransmit+0x30>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003012:	f042 0202 	orr.w	r2, r2, #2
 8003016:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2202      	movs	r2, #2
 800301e:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop

0800302c <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <I2C_MASTER_AbortReceive+0x20>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
    I2C_MASTER_lAbortReceiveIRQ(handle);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff15 	bl	8002e74 <I2C_MASTER_lAbortReceiveIRQ>
 800304a:	e007      	b.n	800305c <I2C_MASTER_AbortReceive+0x30>
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003054:	2b01      	cmp	r3, #1
 8003056:	d001      	beq.n	800305c <I2C_MASTER_AbortReceive+0x30>
    I2C_MASTER_lAbortReceiveDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003074:	0a1b      	lsrs	r3, r3, #8
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <__NVIC_EnableIRQ+0x34>)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	79fa      	ldrb	r2, [r7, #7]
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	490d      	ldr	r1, [pc, #52]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
  }
}
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b06      	cmp	r3, #6
 800312c:	bf28      	it	cs
 800312e:	2306      	movcs	r3, #6
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3306      	adds	r3, #6
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b01      	subs	r3, #1
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	401a      	ands	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	1e59      	subs	r1, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003164:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
 8003180:	4613      	mov	r3, r2
 8003182:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003184:	78f8      	ldrb	r0, [r7, #3]
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	3306      	adds	r3, #6
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8003196:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003198:	431a      	orrs	r2, r3
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	1d83      	adds	r3, r0, #6
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <XMC_USIC_CH_EnableInputDigitalFilter>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 80031bc:	78f8      	ldrb	r0, [r7, #3]
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	3306      	adds	r3, #6
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	1d83      	adds	r3, r0, #6
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	605a      	str	r2, [r3, #4]
}
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <XMC_USIC_CH_EnableInputSync>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
 80031f0:	78f8      	ldrb	r0, [r7, #3]
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	3306      	adds	r3, #6
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	1d83      	adds	r3, r0, #6
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	605a      	str	r2, [r3, #4]
}
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f023 020f 	bic.w	r2, r3, #15
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	2201      	movs	r2, #1
 8003298:	f7fd fe52 	bl	8000f40 <XMC_I2C_CH_InitEx>
}
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop

080032a4 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	2104      	movs	r1, #4
 80032b0:	f7ff ffd6 	bl	8003260 <XMC_USIC_CH_SetMode>
}
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop

080032bc <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <I2C_MASTER_0_disable_io+0x1c>)
 80032c2:	2105      	movs	r1, #5
 80032c4:	2200      	movs	r2, #0
 80032c6:	f7fd fddb 	bl	8000e80 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, XMC_GPIO_MODE_INPUT_TRISTATE);
 80032ca:	4803      	ldr	r0, [pc, #12]	; (80032d8 <I2C_MASTER_0_disable_io+0x1c>)
 80032cc:	210b      	movs	r1, #11
 80032ce:	2200      	movs	r2, #0
 80032d0:	f7fd fdd6 	bl	8000e80 <XMC_GPIO_SetMode>
}
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	48028000 	.word	0x48028000

080032dc <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 80032e0:	23d0      	movs	r3, #208	; 0xd0
 80032e2:	4806      	ldr	r0, [pc, #24]	; (80032fc <I2C_MASTER_0_enable_io+0x20>)
 80032e4:	2105      	movs	r1, #5
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7fd fdca 	bl	8000e80 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, I2C_MASTER_0_scl_pin_config.mode);
 80032ec:	23d0      	movs	r3, #208	; 0xd0
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <I2C_MASTER_0_enable_io+0x20>)
 80032f0:	210b      	movs	r1, #11
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7fd fdc4 	bl	8000e80 <XMC_GPIO_SetMode>
}
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	48028000 	.word	0x48028000

08003300 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 
  const uint32_t enabled_protocol_events = (uint32_t)(XMC_I2C_CH_EVENT_NACK | 
 8003306:	f04f 73b0 	mov.w	r3, #23068672	; 0x1600000
 800330a:	60fb      	str	r3, [r7, #12]
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8003310:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003314:	607b      	str	r3, [r7, #4]
  XMC_I2C_CH_Init(XMC_I2C1_CH0, &I2C_MASTER_0_channel_config);
 8003316:	483d      	ldr	r0, [pc, #244]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003318:	493d      	ldr	r1, [pc, #244]	; (8003410 <I2C_MASTER_0_init+0x110>)
 800331a:	f7ff ffb5 	bl	8003288 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 800331e:	483b      	ldr	r0, [pc, #236]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003320:	2100      	movs	r1, #0
 8003322:	2201      	movs	r2, #1
 8003324:	f7ff ff26 	bl	8003174 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 8003328:	4838      	ldr	r0, [pc, #224]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800332a:	2101      	movs	r1, #1
 800332c:	2200      	movs	r2, #0
 800332e:	f7ff ff21 	bl	8003174 <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0);
 8003332:	4836      	ldr	r0, [pc, #216]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003334:	2100      	movs	r1, #0
 8003336:	f7ff ff3b 	bl	80031b0 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0);
 800333a:	4834      	ldr	r0, [pc, #208]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800333c:	2100      	movs	r1, #0
 800333e:	f7ff ff51 	bl	80031e4 <XMC_USIC_CH_EnableInputSync>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1);
 8003342:	4832      	ldr	r0, [pc, #200]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003344:	2101      	movs	r1, #1
 8003346:	f7ff ff33 	bl	80031b0 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1);
 800334a:	4830      	ldr	r0, [pc, #192]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800334c:	2101      	movs	r1, #1
 800334e:	f7ff ff49 	bl	80031e4 <XMC_USIC_CH_EnableInputSync>
    
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH0,
 8003352:	482e      	ldr	r0, [pc, #184]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003354:	2110      	movs	r1, #16
 8003356:	2204      	movs	r2, #4
 8003358:	2301      	movs	r3, #1
 800335a:	f7fe f98b 	bl	8001674 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 800335e:	482b      	ldr	r0, [pc, #172]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003360:	2110      	movs	r1, #16
 8003362:	2201      	movs	r2, #1
 8003364:	f7fe fa0c 	bl	8001780 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH0, tx_fifo_events);
 8003368:	4828      	ldr	r0, [pc, #160]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	f7ff ff54 	bl	8003218 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH0,
 8003370:	4826      	ldr	r0, [pc, #152]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003372:	2100      	movs	r1, #0
 8003374:	2204      	movs	r2, #4
 8003376:	230f      	movs	r3, #15
 8003378:	f7fe f9a4 	bl	80016c4 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 800337c:	4823      	ldr	r0, [pc, #140]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800337e:	2110      	movs	r1, #16
 8003380:	2200      	movs	r2, #0
 8003382:	f7fe fa1b 	bl	80017bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8003386:	4821      	ldr	r0, [pc, #132]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003388:	2113      	movs	r1, #19
 800338a:	2200      	movs	r2, #0
 800338c:	f7fe fa16 	bl	80017bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH0, rx_fifo_events);
 8003390:	481e      	ldr	r0, [pc, #120]	; (800340c <I2C_MASTER_0_init+0x10c>)
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	f7ff ff52 	bl	800323c <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH0,
 8003398:	481c      	ldr	r0, [pc, #112]	; (800340c <I2C_MASTER_0_init+0x10c>)
 800339a:	2110      	movs	r1, #16
 800339c:	2202      	movs	r2, #2
 800339e:	f7fe f9d3 	bl	8001748 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)2));
  XMC_I2C_CH_EnableEvent(XMC_I2C1_CH0, enabled_protocol_events);
 80033a2:	481a      	ldr	r0, [pc, #104]	; (800340c <I2C_MASTER_0_init+0x10c>)
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	f7fd ff25 	bl	80011f4 <XMC_I2C_CH_EnableEvent>
  XMC_I2C_CH_Start(XMC_I2C1_CH0);
 80033aa:	4818      	ldr	r0, [pc, #96]	; (800340c <I2C_MASTER_0_init+0x10c>)
 80033ac:	f7ff ff7a 	bl	80032a4 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 80033b0:	4818      	ldr	r0, [pc, #96]	; (8003414 <I2C_MASTER_0_init+0x114>)
 80033b2:	2105      	movs	r1, #5
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <I2C_MASTER_0_init+0x118>)
 80033b6:	f7fc ffeb 	bl	8000390 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &I2C_MASTER_0_scl_pin_config);
 80033ba:	4816      	ldr	r0, [pc, #88]	; (8003414 <I2C_MASTER_0_init+0x114>)
 80033bc:	210b      	movs	r1, #11
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <I2C_MASTER_0_init+0x11c>)
 80033c0:	f7fc ffe6 	bl	8000390 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80033c4:	f7ff fe50 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4618      	mov	r0, r3
 80033cc:	213f      	movs	r1, #63	; 0x3f
 80033ce:	2200      	movs	r2, #0
 80033d0:	f7ff fe9e 	bl	8003110 <NVIC_EncodePriority>
 80033d4:	4603      	mov	r3, r0
 80033d6:	205b      	movs	r0, #91	; 0x5b
 80033d8:	4619      	mov	r1, r3
 80033da:	f7ff fe6f 	bl	80030bc <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)91);/* Rx interrupt priority settings */
 80033de:	205b      	movs	r0, #91	; 0x5b
 80033e0:	f7ff fe50 	bl	8003084 <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80033e4:	f7ff fe40 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4618      	mov	r0, r3
 80033ec:	213f      	movs	r1, #63	; 0x3f
 80033ee:	2200      	movs	r2, #0
 80033f0:	f7ff fe8e 	bl	8003110 <NVIC_EncodePriority>
 80033f4:	4603      	mov	r3, r0
 80033f6:	205a      	movs	r0, #90	; 0x5a
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7ff fe5f 	bl	80030bc <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)90);}
 80033fe:	205a      	movs	r0, #90	; 0x5a
 8003400:	f7ff fe40 	bl	8003084 <__NVIC_EnableIRQ>
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	48020000 	.word	0x48020000
 8003410:	08003808 	.word	0x08003808
 8003414:	48028000 	.word	0x48028000
 8003418:	080037f0 	.word	0x080037f0
 800341c:	080037fc 	.word	0x080037fc

08003420 <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <USIC1_1_IRQHandler+0xc>)
 8003426:	f7ff fa41 	bl	80028ac <I2C_MASTER_TransmitHandler>
}
 800342a:	bd80      	pop	{r7, pc}
 800342c:	1ffe8838 	.word	0x1ffe8838

08003430 <USIC1_0_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <USIC1_0_IRQHandler+0xc>)
 8003436:	f7ff fbc1 	bl	8002bbc <I2C_MASTER_ReceiveHandler>
}
 800343a:	bd80      	pop	{r7, pc}
 800343c:	1ffe8838 	.word	0x1ffe8838

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800348e:	2001      	movs	r0, #1
 8003490:	f7ff ffd6 	bl	8003440 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003494:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <SystemCoreSetup+0x94>)
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <SystemCoreSetup+0x98>)
 800349a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800349c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034a0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <SystemCoreSetup+0x94>)
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <SystemCoreSetup+0x94>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <SystemCoreSetup+0x9c>)
 80034b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b8:	3314      	adds	r3, #20
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <SystemCoreSetup+0x9c>)
 80034d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d4:	3314      	adds	r3, #20
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <SystemCoreSetup+0x94>)
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <SystemCoreSetup+0x94>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f023 0310 	bic.w	r3, r3, #16
 80034e4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80034e6:	4a0d      	ldr	r2, [pc, #52]	; (800351c <SystemCoreSetup+0x94>)
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <SystemCoreSetup+0x94>)
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f023 0308 	bic.w	r3, r3, #8
 80034f0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SystemCoreSetup+0x94>)
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <SystemCoreSetup+0x94>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <SystemCoreSetup+0x94>)
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <SystemCoreSetup+0x94>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003508:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <SystemCoreSetup+0x94>)
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <SystemCoreSetup+0x94>)
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003514:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e000ed00 	.word	0xe000ed00
 8003520:	08000000 	.word	0x08000000
 8003524:	58001000 	.word	0x58001000

08003528 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]

  return (status);
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <OSCHP_GetFrequency+0x10>)
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	00b71b00 	.word	0x00b71b00

0800355c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <SystemCoreClockSetup+0x54>)
 8003564:	1d3c      	adds	r4, r7, #4
 8003566:	461d      	mov	r5, r3
 8003568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd f806 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003578:	2000      	movs	r0, #0
 800357a:	f7fd f92b 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd f8e0 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003584:	2004      	movs	r0, #4
 8003586:	f7fd f9b1 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800358a:	f7fd fa2b 	bl	80009e4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800358e:	2001      	movs	r0, #1
 8003590:	2120      	movs	r1, #32
 8003592:	f7fd fa37 	bl	8000a04 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003596:	2000      	movs	r0, #0
 8003598:	f7fd f8e8 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fd f9cd 	bl	800093c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f7fd f9b6 	bl	8000914 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bdb0      	pop	{r4, r5, r7, pc}
 80035ae:	bf00      	nop
 80035b0:	0800383c 	.word	0x0800383c

080035b4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80035ba:	2300      	movs	r3, #0
 80035bc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80035be:	4811      	ldr	r0, [pc, #68]	; (8003604 <DAVE_Init+0x50>)
 80035c0:	f7ff ffb2 	bl	8003528 <CLOCK_XMC4_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <DAVE_Init+0x24>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 80035ce:	480e      	ldr	r0, [pc, #56]	; (8003608 <DAVE_Init+0x54>)
 80035d0:	f7ff f936 	bl	8002840 <I2C_MASTER_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80035de:	480b      	ldr	r0, [pc, #44]	; (800360c <DAVE_Init+0x58>)
 80035e0:	f7fe fedc 	bl	800239c <SYSTIMER_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <DAVE_Init+0x44>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80035ee:	4808      	ldr	r0, [pc, #32]	; (8003610 <DAVE_Init+0x5c>)
 80035f0:	f7fe f9ee 	bl	80019d0 <UART_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80035f8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	1ffe8870 	.word	0x1ffe8870
 8003608:	1ffe8838 	.word	0x1ffe8838
 800360c:	1ffe886c 	.word	0x1ffe886c
 8003610:	1ffe8800 	.word	0x1ffe8800

08003614 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	2110      	movs	r1, #16
 8003644:	f7ff ffe6 	bl	8003614 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fd1f 	bl	8001090 <XMC_I2C_CH_MasterStop>
}
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <callbackI2cTimeout>:
volatile uint8_t I2cTxCompletion = 0;
volatile uint8_t I2cRxCompletion = 0;
volatile bool bI2cNack = false;
volatile bool bI2cTimeout = false;

void callbackI2cTimeout(void *args) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	bI2cTimeout = true;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <callbackI2cTimeout+0x28>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]

	I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 8003666:	4807      	ldr	r0, [pc, #28]	; (8003684 <callbackI2cTimeout+0x2c>)
 8003668:	f7ff fcb6 	bl	8002fd8 <I2C_MASTER_AbortTransmit>
	I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 800366c:	4805      	ldr	r0, [pc, #20]	; (8003684 <callbackI2cTimeout+0x2c>)
 800366e:	f7ff fcdd 	bl	800302c <I2C_MASTER_AbortReceive>
	I2C_MASTER_Init(&I2C_MASTER_0);
 8003672:	4804      	ldr	r0, [pc, #16]	; (8003684 <callbackI2cTimeout+0x2c>)
 8003674:	f7ff f8e4 	bl	8002840 <I2C_MASTER_Init>
}
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	1ffe887b 	.word	0x1ffe887b
 8003684:	1ffe8838 	.word	0x1ffe8838

08003688 <callbackI2cTx>:
	else {
		SYSTIMER_StopTimer(timerI2c);
	}
}

void callbackI2cTx(void) {
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	I2cTxCompletion = 1;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <callbackI2cTx+0x14>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
}
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	1ffe8878 	.word	0x1ffe8878

080036a0 <callbackI2cRx>:

void callbackI2cRx(void) {
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
	I2cRxCompletion = 1;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <callbackI2cRx+0x14>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
}
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	1ffe8879 	.word	0x1ffe8879

080036b8 <I2C_NACK_IRQ_Handler>:

void I2C_NACK_IRQ_Handler(void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	bI2cNack = 1;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <I2C_NACK_IRQ_Handler+0x20>)
 80036be:	2201      	movs	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]
	I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <I2C_NACK_IRQ_Handler+0x24>)
 80036c4:	f7ff fc88 	bl	8002fd8 <I2C_MASTER_AbortTransmit>
	I2C_MASTER_SendStop(&I2C_MASTER_0);
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <I2C_NACK_IRQ_Handler+0x24>)
 80036ca:	f7ff ffb3 	bl	8003634 <I2C_MASTER_SendStop>
	I2C_MASTER_Init(&I2C_MASTER_0);
 80036ce:	4803      	ldr	r0, [pc, #12]	; (80036dc <I2C_NACK_IRQ_Handler+0x24>)
 80036d0:	f7ff f8b6 	bl	8002840 <I2C_MASTER_Init>
}
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	1ffe887a 	.word	0x1ffe887a
 80036dc:	1ffe8838 	.word	0x1ffe8838

080036e0 <I2C_ARB_Lost_IRQ_Handler>:

void I2C_ARB_Lost_IRQ_Handler(void) {
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	bI2cNack = 1;
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <I2C_ARB_Lost_IRQ_Handler+0x14>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
}
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	1ffe887a 	.word	0x1ffe887a

080036f8 <I2C_ERR_IRQ_Handler>:

void I2C_ERR_IRQ_Handler(void) {
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
	bI2cNack = 1;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <I2C_ERR_IRQ_Handler+0x14>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
}
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	1ffe887a 	.word	0x1ffe887a

08003710 <main>:
		return true;
	}
}

int main(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8003716:	f7ff ff4d 	bl	80035b4 <DAVE_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d000      	beq.n	8003726 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8003724:	e7fe      	b.n	8003724 <main+0x14>
  }

  timerI2c = SYSTIMER_CreateTimer(10000, SYSTIMER_MODE_PERIODIC, callbackI2cTimeout, NULL);
 8003726:	f242 7010 	movw	r0, #10000	; 0x2710
 800372a:	2101      	movs	r1, #1
 800372c:	4a03      	ldr	r2, [pc, #12]	; (800373c <main+0x2c>)
 800372e:	2300      	movs	r3, #0
 8003730:	f7fe fe6e 	bl	8002410 <SYSTIMER_CreateTimer>
 8003734:	4602      	mov	r2, r0
 8003736:	4b02      	ldr	r3, [pc, #8]	; (8003740 <main+0x30>)
 8003738:	601a      	str	r2, [r3, #0]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 800373a:	e7fe      	b.n	800373a <main+0x2a>
 800373c:	08003659 	.word	0x08003659
 8003740:	1ffe8874 	.word	0x1ffe8874

08003744 <__libc_init_array>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <__libc_init_array+0x3c>)
 8003748:	4c0e      	ldr	r4, [pc, #56]	; (8003784 <__libc_init_array+0x40>)
 800374a:	1ae4      	subs	r4, r4, r3
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	2500      	movs	r5, #0
 8003750:	461e      	mov	r6, r3
 8003752:	42a5      	cmp	r5, r4
 8003754:	d004      	beq.n	8003760 <__libc_init_array+0x1c>
 8003756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375a:	4798      	blx	r3
 800375c:	3501      	adds	r5, #1
 800375e:	e7f8      	b.n	8003752 <__libc_init_array+0xe>
 8003760:	f7fe f8aa 	bl	80018b8 <_init>
 8003764:	4c08      	ldr	r4, [pc, #32]	; (8003788 <__libc_init_array+0x44>)
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <__libc_init_array+0x48>)
 8003768:	1ae4      	subs	r4, r4, r3
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	2500      	movs	r5, #0
 800376e:	461e      	mov	r6, r3
 8003770:	42a5      	cmp	r5, r4
 8003772:	d004      	beq.n	800377e <__libc_init_array+0x3a>
 8003774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003778:	4798      	blx	r3
 800377a:	3501      	adds	r5, #1
 800377c:	e7f8      	b.n	8003770 <__libc_init_array+0x2c>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	1ffe8844 	.word	0x1ffe8844
 8003784:	1ffe8844 	.word	0x1ffe8844
 8003788:	1ffe8844 	.word	0x1ffe8844
 800378c:	1ffe8844 	.word	0x1ffe8844

08003790 <UART_0_channel_config>:
 8003790:	0001c200 01080800 00000010              ............

0800379c <UART_0_tx_pin_config>:
 800379c:	00000090 00000001 00000002              ............

080037a8 <UART_0_tx_pin>:
 80037a8:	48028100 00000005 0800379c              ...H.....7..

080037b4 <UART_0_config>:
 80037b4:	08003790 08001df9 00000000 00000000     .7..............
	...
 80037d8:	080037a8 04000000 00000304              .7..........

080037e4 <UART_0_rx_pin_config>:
 80037e4:	00000000 00000001 00000002              ............

080037f0 <I2C_MASTER_0_sda_pin_config>:
 80037f0:	000000d0 00000001 00000001              ............

080037fc <I2C_MASTER_0_scl_pin_config>:
 80037fc:	000000d0 00000001 00000003              ............

08003808 <I2C_MASTER_0_channel_config>:
 8003808:	00061a80 00000000                       ........

08003810 <I2C_MASTER_0_config>:
 8003810:	08003808 08003301 080032dd 080032bd     .8...3...2...2..
 8003820:	08003689 080036a1 080036b9 080036e1     .6...6...6...6..
 8003830:	080036f9 04040000 00005a5b 01010230     .6......[Z..0...
 8003840:	00010000 00000000 00010000 01010102     ................
